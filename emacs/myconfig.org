#+TITLE: myinit.org file
#+STARTUP: overview indent
* Sources:
 - http://orgmode.org/worg/org-contrib/babel/intro.html
 - https://github.com/zamansky/using-emacs
 - http://pragmaticemacs.com/installing-and-setting-up-emacs/
* Literate Emacs Initialization
 - Follow this [[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-emacs-init][link]]!
* Tweaking Prelude options
 #+BEGIN_SRC emacs-lisp
   ;;enable arrow keys
   (setq prelude-guru nil)

   ;;smooth scrolling
   (setq prelude-use-smooth-scrolling t)

   ;;uncomment this to use default theme
   ;;(disable-theme 'zenburn)

   ;;change highlight color
   ;;(set-face-attribute 'region t :background "#164040")

   ;;don't highlight the end of long lines
   (setq whitespace-line-column 99999)

   ;;turn off aggressive auto save
   (setq prelude-auto-save nil)
   (setq
        backup-by-copying t      ;; don't clobber symlinks
        backup-directory-alist
        '(("." . "/tmp/emacs-backups"))    ;; don't litter my fs tree
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
 #+END_SRC
* Loading additional packages - TaEmaX
 #+BEGIN_SRC emacs-lisp
   ;;Declare a list of required packages
   (defvar taemax--required-packages
     '(helm
       multiple-cursors
       ace-jump-mode
       powerline
       switch-window
       buffer-move
       auto-complete
       ztree
       color-theme-modern ;; install package by M-x package-install [RET] color-theme-modern [RET]
       material-theme
       color-theme-sanityinc-tomorrow
       solarized-theme
       spacemacs-theme
       spaceline
       meta-presenter
       myterminal-controls
       theme-looper
       org-bullets))

   ;;Install required packages
   (mapc (lambda (p)
           (package-install p))
         taemax--required-packages)
 #+END_SRC

 #+RESULTS:
 | helm | multiple-cursors | ace-jump-mode | powerline | switch-window | buffer-move | auto-complete | ztree | color-theme-modern | material-theme | color-theme-sanityinc-tomorrow | solarized-theme | meta-presenter | myterminal-controls | theme-looper | org-bullets |

* Basics
** auto-complete, ace-jump-mode, powerline, theme-looper, etc
#+BEGIN_SRC emacs-lisp
  ;;Load default auto-complete configs
  (ac-config-default)

  ;;Set up ace-jump-mode
  (autoload 'ace-jump-mode
    "ace-jump-mode"
    "Emacs quick move minor mode"
    t)
  (autoload 'ace-jump-mode-pop-mark
    "ace-jump-mode"
    "Ace jump back:-"
    t)

  ;;Enable powerline
  (powerline-center-theme)
  ;(setq powerline-default-separator 'wave)
  (setq powerline-default-separator 'utf-8)

  ;;Configure theme-looper
  (theme-looper-set-theme-set '(spacemacs-dark
                                spacemacs-light))
                                ;; cobalt
                                ;; sanityinc-tomorrow-night
                                ;; sanityinc-tomorrow-blue
                                ;; sanityinc-tomorrow-day
                                ;; sanityinc-tomorrow-eighties
                                ;; solarized-dark
                                ;; material
                                ;; tsdh-dark
                                ;; deeper-blue
                                ;; wheatgrass
                                ;; zenburn
                                ;; wombat
                                ;; misterioso
                                ;; tango-dark
                                ;; dichromacy))
  (theme-looper-set-customizations 'powerline-reset)

  ;;Activate sanityinc theme
  (load-theme 'spacemacs-dark t)

  ;;Configure myterminal-controls
  (myterminal-controls-set-controls-data
   '(("t" "Change color theme" theme-looper-enable-next-theme)
     ("r" "Reload file" super-emacs-reload-current-file)
     ("f" "Toggle full frame" toggle-frame-fullscreen)
     ("o" "Toggle transparency" toggle-transparency)))

  ;;Set up helm-mode
  (helm-mode 1)
  (helm-autoresize-mode 1)
  (setq helm-split-window-in-side-p
        t)
#+END_SRC

#+RESULTS:
: t
** Miscellaneous
 #+BEGIN_SRC emacs-lisp
   (defun super-emacs-reload-current-file ()
     "Reload the file loaded in current buffer from the disk"
     (interactive)
     (cond (buffer-file-name (progn (find-alternate-file buffer-file-name)
                                    (message "File reloaded")))
           (t (message "You're not editing a file!"))))

   ;; ;;Enable show-paren-mode
   ;; (show-paren-mode)

   ;;Enable winner-mode
   (winner-mode t)

   ;;Enable windmove
   (windmove-default-keybindings)

   ;;Save minibuffer history
   (savehist-mode 1)

   ;;Text-mode as default
   ;(setq initial-major-mode 'text-mode)
   (setq initial-major-mode 'org-mode)

   ;;TAB key working as in other editors
   (global-set-key (kbd "TAB") 'self-insert-command)

   ;;Line wrapping
   (global-visual-line-mode 1) ; 1 for on, 0 for off.
 #+END_SRC

 #+RESULTS:
 : t

* MacOS modifier keys
 #+BEGIN_SRC emacs-lisp
   ;;OSX modifier keys
   ;; (setq mac-command-modifier 'meta)
   ;; (setq mac-option-modifier 'super)
 #+END_SRC
* Interface tweaks
** Basics
 #+BEGIN_SRC emacs-lisp
   ;;(setq inhibit-startup-message t)
   (setq frame-title-format "TaEmaX")
   (scroll-bar-mode -1)
   (global-set-key (kbd "<f5>") 'revert-beffer)

   ;;Disable splash message, start *scratch* buffer by default
   (setq initial-buffer-choice t)
   (setq initial-scratch-message "")
 #+END_SRC
** modeline
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :ensure t)
#+END_SRC

#+RESULTS:
** spacemacs theme
#+BEGIN_SRC emacs-lisp
  (setq spacemacs-theme-org-agenda-height nil)
  (setq spacemacs-theme-org-height nil)
#+END_SRC

#+RESULTS:
** customize
#+BEGIN_SRC emacs-lisp
  ;; set sizes here to stop spacemacs theme resizing these
  ;; (set-face-attribute 'org-level-1 nil :height 1.0)
  ;; (set-face-attribute 'org-level-2 nil :height 1.0)
  ;; (set-face-attribute 'org-level-3 nil :height 1.0)
  ;; (set-face-attribute 'org-scheduled-today nil :height 1.0)
  ;; (set-face-attribute 'org-agenda-date-today nil :height 1.1)
  ;; (set-face-attribute 'org-table nil :foreground "#008787")
#+END_SRC

#+RESULTS:
** spaceline
#+BEGIN_SRC emacs-lisp
  ;; (use-package spaceline
  ;;   :demand t
  ;;   :init
  ;;   (setq powerline-default-separator 'arrow-fade)
  ;;   :config
  ;;   (require 'spaceline-config)
  ;;   (spaceline-spacemacs-theme))
#+END_SRC

#+RESULTS:
: t
** Using fancy lambda
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

#+RESULTS:
: t
* Windows
** Resizing windows
 #+BEGIN_SRC emacs-lisp
   (bind-key "s-C-<left>"  'shrink-window-horizontally)
   (bind-key "s-C-<right>" 'enlarge-window-horizontally)
   (bind-key "s-C-<down>"  'shrink-window)
   (bind-key "s-C-<up>"    'enlarge-window)
 #+END_SRC
** Split and switch
Whenever I split windows, I usually do so and also switch to the other
window as well, so might as well rebind the splitting key bindings to
do just that to reduce the repetition.
 #+BEGIN_SRC emacs-lisp
   (defun vsplit-other-window ()
     "Splits the window vertically and switches to that window."
     (interactive)
     (split-window-vertically)
     (other-window 1 nil))
   (defun hsplit-other-window ()
     "Splits the window horizontally and switches to that window."
     (interactive)
     (split-window-horizontally)
     (other-window 1 nil))
   (bind-key "C-x 2" 'vsplit-other-window)
   (bind-key "C-x 3" 'hsplit-other-window)
 #+END_SRC
* Org mode
** Org-plus-contrib
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC

#+RESULTS:
: ((gnu . http://elpa.gnu.org/packages/) (melpa . https://melpa.org/packages/) (org . https://orgmode.org/elpa/))

** Org bullets makes things look nice
*Original org-bullets-bullet-list*: ("◉" "○" "✸" "✿")
*Candidate symbol lists*: from [[https://zhangda.wordpress.com/2016/02/15/configurations-for-beautifying-emacs-org-mode/][Da's web notes]]
 - hexagrams
   “✡” “⎈” “✽” “✲” “✱” “✻” “✼” “✽” “✾” “✿” “❀” “❁” “❂” “❃” “❄” “❅” “❆” “❇”

 - circles
   “○” “☉” “◎” “◉” “○” “◌” “◎” “●” “◦” “◯” “⚪” “⚫” “⚬” “❍” “￮” “⊙” “⊚” “⊛” “∙” “∘”

 - special circles
   “◐” “◑” “◒” “◓” “◴” “◵” “◶” “◷” “⚆” “⚇” “⚈” “⚉” “♁” “⊖” “⊗” “⊘”

 - crosses
   “✙” “♱” “♰” “☥” “✞” “✟” “✝” “†” “✠” “✚” “✜” “✛” “✢” “✣” “✤” “✥”

 - poker sybmols
   “♠” “♣” “♥” “♦” “♤” “♧” “♡” “♢”

 - yinyang
   “☯” “☰” “☱” “☲” “☳” “☴” “☵” “☶” “☷”

 - special symbols
   “☀” “♼” “☼” “☾” “☽” “☣” “§” “¶” “‡” “※” “✕” “△” “◇” “▶” “◀” “◈”
 #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
     :ensure t
     :config
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   (setq org-bullets-bullet-list '("⊚" "⊙" "◉" "○" "●" "⚬" "◦"))
   ;; (setq org-bullets-bullet-list '("◉" "○" "✸" "✿"))

 #+END_SRC

 #+RESULTS:
 | ⊚ | ⊙ | ◉ | ○ | ● | ⚬ | ◦ |

** Org-ellipsis
*Some options*
 - right arrows
   “↝” “⇉” “⇝” “⇢” “⇨” “⇰” “➔” “➙” “➛” “➜” “➝” “➞”
   “➟” “➠” “➡” “➥” “➦” “➧” “➨”
   “➩” “➪” “➮” “➯” “➱” “➲”
   “➳” “➵” “➸” “➺” “➻” “➼” “➽”

 - arrow heads
   “➢” “➣” “➤” “≪”, “≫”, “«”, “»”

 - other arrows
   “↞” “↠” “↟” “↡” “↺” “↻”

 - lightening
   “⚡”

 - other symbols
   "…", "▼", "↴", "∞", "⬎", "⤷", "⤵"

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ↴")
#+END_SRC

#+RESULTS:
:  ↴
** More org-mode cosmetics
 #+BEGIN_SRC emacs-lisp
   ;; Org-mode configuration
   (font-lock-add-keywords
    'org-mode
    '(("^ +\\([-*]\\) "
       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
   (let* ((variable-tuple (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                                ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                                ((x-list-fonts "Verdana")         '(:font "Verdana"))
                                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
          (base-font-color     (face-foreground 'default nil 'default))
          (headline           `(:inherit default :weight bold :foreground ,base-font-color)))
     (custom-theme-set-faces 'user
                             `(org-level-8 ((t (,@headline ,@variable-tuple))))
                             `(org-level-7 ((t (,@headline ,@variable-tuple))))
                             `(org-level-6 ((t (,@headline ,@variable-tuple))))
                             `(org-level-5 ((t (,@headline ,@variable-tuple))))
                             `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.05))))
                             `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.15))))
                             `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.25))))
                             `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.5))))
                             `(org-document-title ((t (,@headline ,@variable-tuple :height 1.5 :underline nil))))))

   ;; Fancy todo list
   (setq org-todo-keywords
         '((sequence "☛ TODO(t)" "|" "✔ DONE(d)")
           (sequence "☞ WAITING(w)" "|")
           (sequence "|" "✘ CANCELED(c)")))
 #+END_SRC
** More org stuff
 #+BEGIN_SRC emacs-lisp
   (setq org-confirm-babel-evaluate nil)
   (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
   (add-hook 'org-mode-hook 'org-display-inline-images)
 #+END_SRC
** Babel languages
 #+BEGIN_SRC emacs-lisp
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (ruby . t)
      (lisp . t)
      (matlab . t)
      (fortran . t)
      (python . t)
      (shell . t)
      (C . t)
      (makefile . t)
      (mathematica . t)
      ))
 #+END_SRC

 #+RESULTS:
** Babel editing in the current window
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

#+RESULTS:
: current-window

** Org source language
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-src-lang-modes '("fortran" . f90))
#+END_SRC

#+RESULTS:
: ((fortran . f90) (ocaml . tuareg) (elisp . emacs-lisp) (ditaa . artist) (asymptote . asy) (dot . fundamental) (sqlite . sql) (calc . fundamental) (C . c) (cpp . c++) (C++ . c++) (screen . shell-script) (shell . sh) (bash . sh))

** Export
#+BEGIN_SRC emacs-lisp
  (require 'ox-beamer)
  (require 'ox-md)
#+END_SRC

#+RESULTS:
: ox-md
** Export with minted
#+BEGIN_SRC emacs-lisp
  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

#+RESULTS:
| pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f | pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f |

* Emacsclient
 #+BEGIN_SRC emacs-lisp
   (use-package server
    :config
    (server-start))
 #+END_SRC
* Key bindings
** taemax keybinding
 #+BEGIN_SRC emacs-lisp
   (defvar taemax--my-keyboard-bindings
     '(("C-}" . mc/mark-next-like-this)
       ("C-{" . mc/mark-previous-like-this)
       ("C-|" . mc/mark-all-like-this)
       ("C->" . ace-jump-mode)
       ("C-<" . ace-jump-mode-pop-mark)
       ("M-/" . undo-tree-visualize)
       ("C-\"" . theme-looper-enable-next-theme)
       ("C-M-'" . myterminal-controls-open-controls)
       ("C-c M-x" . execute-extended-command)
       ("M-x" . helm-M-x)
       ("C-x b" . helm-mini)
       ("C-x C-b" . helm-buffers-list)
       ("C-x C-f" . helm-find-files)
       ("C-x C-r" . helm-recentf)
       ("M-y" . helm-show-kill-ring)
       ("C-z" . switch-window)
       ("C-S-<up>" . buf-move-up)
       ("C-S-<down>" . buf-move-down)
       ("C-S-<left>" . buf-move-left)
       ("C-S-<right>" . buf-move-right)
       ("<f5>" . super-emacs-reload-current-file)))

   (defun taemax-apply-keyboard-bindings (pair)
     "Apply keyboard-bindings for supplied list of key-pair values"
     (global-set-key (kbd (car pair))
                     (cdr pair)))

   (mapc 'taemax-apply-keyboard-bindings
         taemax--my-keyboard-bindings)
 #+END_SRC

 #+RESULTS:
 : ((C-} . mc/mark-next-like-this) (C-{ . mc/mark-previous-like-this) (C-| . mc/mark-all-like-this) (C-> . ace-jump-mode) (C-< . ace-jump-mode-pop-mark) (M-/ . undo-tree-visualize) (C-" . theme-looper-enable-next-theme) (C-M-' . myterminal-controls-open-controls) (C-c M-x . execute-extended-command) (M-x . helm-M-x) (C-x b . helm-mini) (C-x C-b . helm-buffers-list) (C-x C-f . helm-find-files) (C-x C-r . helm-recentf) (M-y . helm-show-kill-ring) (C-z . switch-window) (<f5> . super-emacs-reload-current-file))
** Smartparens
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-<tab>") 'sp-up-sexp)
#+END_SRC

#+RESULTS:
: sp-up-sexp

* AucTeX
** Basic setting
Most are already done in Prelude
 #+BEGIN_SRC emacs-lisp
   ;; ;; my AUCTeX configuration
   ;; ;; To get support for many of LaTeX packages
   ;; (setq TeX-auto-save t)
   ;; (setq TeX-parse-self t)
   ;; (setq TeX-PDF-mode t)

   ;; ;; For multi-file document structures (e.g. \include or \input)
   ;; (setq-default TeX-master nil)

   ;; ;; Symbolic link created by MacTeX-2015 is found here
   ;; (setenv "PATH" "/usr/local/bin:/Library/TeX/texbin/:$PATH" t)
   ;; (setq exec-path (append exec-path '("/Library/TeX/texbin")))
   ;; (setq exec-path (append '("/usr/local/bin") exec-path)) ;

   ;; ;; For folding macros and environments
   ;; (add-hook 'TeX-mode-hook (lambda ()
   ;;                            (TeX-fold-mode 1)))
 #+END_SRC
** More hooks
 #+BEGIN_SRC emacs-lisp
   ;; More hooks
   (add-hook 'LaTeX-mdoe-hook 'visual-line-mode)
   (add-hook 'LaTeX-mode-hook 'flyspell-mode)
   (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
   (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
   (setq reftex-plug-into-AUCTeX t)
 #+END_SRC

 #+RESULTS:
 : t

** latexmk
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook (lambda ()
    (push
      '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
        :help "Run latexmk on file")
      TeX-command-list)))
  (add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk")))
#+END_SRC

#+RESULTS:
| lambda | nil | (setq TeX-command-default latexmk) |

** COMMENT Auctex and okular
Following [[http://www.kevindemarco.com/2013/04/24/emacs-auctex-synctex-okular-on-ubuntu-12-04/][this link]]:
#+BEGIN_SRC emacs-lisp
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Latex for Emacs
  ;;
  ;; Dependencies: okular, texlive-full, auctex
  ;;
  ;; Okular setup:
  ;; 1.) Open Okular and go to...
  ;; 2.) Settings -> Configure Okular -> Editor
  ;; 3.) Set Editor to "Emacs client"
  ;; 4.) Command should automatically set to:
  ;; emacsclient -a emacs --no-wait +%l %f
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; only start server for okular comms when in latex mode
  (add-hook 'LaTeX-mode-hook 'server-start)
  (setq TeX-PDF-mode t) ;; use pdflatex instead of latex

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Standard emacs/latex config
  ;; http://emacswiki.org/emacs/AUCTeX
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)

  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

                                          ; enable auto-fill mode, nice for text
  (add-hook 'LaTeX-mode-hook 'auto-fill-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Enable synctex correlation
  ;; ##### Enable synctex correlation. From Okular just press
  ;; ##### Shift + Left click to go to the good line.
  (setq TeX-source-correlate-mode t
        TeX-source-correlate-start-server t)
  (setq TeX-source-correlate-method 'synctex)
  ;; Enable synctex generation. Even though the command shows
  ;; as "latex" pdflatex is actually called
  (custom-set-variables '(LaTeX-command "latex -synctex=1") )
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Use Okular as the pdf viewer. Build okular
  ;; command, so that Okular jumps to the current line
  ;; in the viewer.
  (setq TeX-view-program-selection
        '((output-pdf "PDF Viewer")))
  (setq TeX-view-program-list
        '(("PDF Viewer" "okular --unique %o#src:%n%b")))
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

#+RESULTS:
| PDF Viewer | okular --unique %o#src:%n%b |

** COMMENT Auctex and evince
The following is taken from [[http://www.wangzerui.com/2017/02/21/setting-up-a-nice-environment-for-latex-on-ubuntu/][here]]:
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; setting up latex mode
  ;; Forward/inverse search with evince using D-bus.
  ;; Installation:
  ;; M-x package-install RET auctex RET
  (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  (setq TeX-source-correlate-method 'synctex)

  (if (require 'dbus "dbus" t)
      (progn
        ;; universal time, need by evince
        (defun utime ()
          (let ((high (nth 0 (current-time)))
                (low (nth 1 (current-time))))
            (+ (* high (lsh 1 16) ) low)))

        ;; Forward search.
        ;; Adapted from http://dud.inf.tu-dresden.de/~ben/evince_synctex.tar.gz
        (defun auctex-evince-forward-sync (pdffile texfile line)
          (let ((dbus-name
                 (dbus-call-method :session
                                   "org.gnome.evince.Daemon"  ; service
                                   "/org/gnome/evince/Daemon" ; path
                                   "org.gnome.evince.Daemon"  ; interface
                                   "FindDocument"
                                   (concat "file://" pdffile)
                                   t     ; Open a new window if the file is not opened.
                                   )))
            (dbus-call-method :session
                              dbus-name
                              "/org/gnome/evince/Window/0"
                              "org.gnome.evince.Window"
                              "SyncView"
                              texfile
                              (list :struct :int32 line :int32 1)
                              (utime))))

        (defun auctex-evince-view ()
          (let ((pdf (file-truename (concat default-directory
                                            (TeX-master-file (TeX-output-extension)))))
                (tex (buffer-file-name))
                (line (line-number-at-pos)))
            (auctex-evince-forward-sync pdf tex line)))

        ;; New view entry: Evince via D-bus.
        (setq TeX-view-program-list '())
        (add-to-list 'TeX-view-program-list
                     '("EvinceDbus" auctex-evince-view))

        ;; Prepend Evince via D-bus to program selection list
        ;; overriding other settings for PDF viewing.
        (setq TeX-view-program-selection '())
        (add-to-list 'TeX-view-program-selection
                     '(output-pdf "EvinceDbus"))

        ;; Inverse search.
        ;; Adapted from: http://www.mail-archive.com/auctex@gnu.org/msg04175.html
        (defun auctex-evince-inverse-sync (file linecol timestamp)
          (let ((buf (get-file-buffer (substring file 7)))
                (line (car linecol))
                (col (cadr linecol)))
            (if (null buf)
                (message "Sorry, %s is not opened..." file)
              (switch-to-buffer buf)
              (goto-line (car linecol))
              (unless (= col -1)
                (move-to-column col)))))

        (dbus-register-signal
         :session nil "/org/gnome/evince/Window/0"
         "org.gnome.evince.Window" "SyncSource"
         'auctex-evince-inverse-sync)))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

#+RESULTS:
| :signal | :session                   | org.gnome.evince.Window    | SyncSource |
| nil     | /org/gnome/evince/Window/0 | auctex-evince-inverse-sync |            |

** Auctex and evince
The following solution is from [[https://tex.stackexchange.com/questions/29813/setup-synctex-with-emacs][here]].
#+BEGIN_SRC emacs-lisp
  ; SyncTeX basics

  ; un-urlify and urlify-escape-only should be improved to handle all special characters, not only spaces.
  ; The fix for spaces is based on the first comment on http://emacswiki.org/emacs/AUCTeX#toc20

  (defun un-urlify (fname-or-url)
    "Transform file:///absolute/path from Gnome into /absolute/path with very limited support for special characters"
    (if (string= (substring fname-or-url 0 8) "file:///")
        (url-unhex-string (substring fname-or-url 7))
      fname-or-url))

  (defun urlify-escape-only (path)
    "Handle special characters for urlify"
    (replace-regexp-in-string " " "%20" path))

  (defun urlify (absolute-path)
    "Transform /absolute/path to file:///absolute/path for Gnome with very limited support for special characters"
    (if (string= (substring absolute-path 0 1) "/")
        (concat "file://" (urlify-escape-only absolute-path))
        absolute-path))


  ; SyncTeX backward search - based on http://emacswiki.org/emacs/AUCTeX#toc20, reproduced on https://tex.stackexchange.com/a/49840/21017

  (defun th-evince-sync (file linecol &rest ignored)
    (let* ((fname (un-urlify file))
           (buf (find-file fname))
           (line (car linecol))
           (col (cadr linecol)))
      (if (null buf)
          (message "[Synctex]: Could not open %s" fname)
        (switch-to-buffer buf)
        (goto-line (car linecol))
        (unless (= col -1)
          (move-to-column col)))))

  (defvar *dbus-evince-signal* nil)

  (defun enable-evince-sync ()
    (require 'dbus)
    ; cl is required for setf, taken from: http://lists.gnu.org/archive/html/emacs-orgmode/2009-11/msg01049.html
    (require 'cl)
    (when (and
           (eq window-system 'x)
           (fboundp 'dbus-register-signal))
      (unless *dbus-evince-signal*
        (setf *dbus-evince-signal*
              (dbus-register-signal
               :session nil "/org/gnome/evince/Window/0"
               "org.gnome.evince.Window" "SyncSource"
               'th-evince-sync)))))

  (add-hook 'LaTeX-mode-hook 'enable-evince-sync)


  ; SyncTeX forward search - based on https://tex.stackexchange.com/a/46157

  ;; universal time, need by evince
  (defun utime ()
    (let ((high (nth 0 (current-time)))
          (low (nth 1 (current-time))))
     (+ (* high (lsh 1 16) ) low)))

  ;; Forward search.
  ;; Adapted from http://dud.inf.tu-dresden.de/~ben/evince_synctex.tar.gz
  (defun auctex-evince-forward-sync (pdffile texfile line)
    (let ((dbus-name
       (dbus-call-method :session
                 "org.gnome.evince.Daemon"  ; service
                 "/org/gnome/evince/Daemon" ; path
                 "org.gnome.evince.Daemon"  ; interface
                 "FindDocument"
                 (urlify pdffile)
                 t     ; Open a new window if the file is not opened.
                 )))
      (dbus-call-method :session
            dbus-name
            "/org/gnome/evince/Window/0"
            "org.gnome.evince.Window"
            "SyncView"
            (urlify-escape-only texfile)
            (list :struct :int32 line :int32 1)
    (utime))))

  (defun auctex-evince-view ()
    (let ((pdf (file-truename (concat default-directory
                      (TeX-master-file (TeX-output-extension)))))
      (tex (buffer-file-name))
      (line (line-number-at-pos)))
      (auctex-evince-forward-sync pdf tex line)))

  ;; New view entry: Evince via D-bus.
  (setq TeX-view-program-list '())
  (add-to-list 'TeX-view-program-list
           '("EvinceDbus" auctex-evince-view))

  ;; Prepend Evince via D-bus to program selection list
  ;; overriding other settings for PDF viewing.
  (setq TeX-view-program-selection '())
  (add-to-list 'TeX-view-program-selection
           '(output-pdf "EvinceDbus"))
#+END_SRC

#+RESULTS:
| output-pdf | EvinceDbus |

** RefTeX and syncing
 #+BEGIN_SRC emacs-lisp
   ;; ;; [[http://www.stefanom.org/setting-up-a-nice-auctex-environment-on-mac-os-x/]]
   ;; ;; Use Skim as viewer, enable source <-> PDF sync make latexmk
   ;; ;; available via C-c C-c Note: SyncTeX is setup via ~/.latexmkrc (see
   ;; ;; below)
   ;; (add-hook 'LaTeX-mode-hook (lambda ()
   ;;   (push
   ;;     '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
   ;;       :help "Run latexmk on file")
   ;;     TeX-command-list)))
   ;; (add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk")))

   ;; ;; [[http://stackoverflow.com/questions/7899845/emacs-synctex-skim-how-to-correctly-set-up-syncronization-none-of-the-exi]]
   ;; ;; forward search
   ;; (add-hook 'LaTeX-mode-hook
   ;;           (lambda () (local-set-key (kbd "<M-S-mouse-1>") #'TeX-view))
   ;;           )
   ;; ;; use Skim as default pdf viewer
   ;; ;; Skim's displayline is used for forward search (from .tex to .pdf)
   ;; ;; option -b highlights the current line; option -g opens Skim in the background
   ;; (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
   ;; (setq TeX-view-program-list
   ;;      '(("PDF Viewer" "~/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n \"%o\" \"%b\"")))
   ;; (custom-set-variables
   ;;      '(TeX-source-correlate-method 'synctex)
   ;;      '(TeX-source-correlate-mode t)
   ;;      '(TeX-source-correlate-start-server t))
   ;; (server-start)
 #+END_SRC
* matlab mode
 #+BEGIN_SRC elisp
   (use-package matlab-mode
     :ensure t)
   (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
   (add-to-list
    'auto-mode-alist
    '("\\.m$" . matlab-mode))
   (setq matlab-indent-function t)
   (setq matlab-shell-command "matlab")
 #+END_SRC

 #+RESULTS:
 : matlab
* slime
 #+BEGIN_SRC elisp
   (use-package slime
     :ensure t)
   ;;(setq inferior-lisp-program "/opt/sbcl/bin/sbcl")
   (setq inferior-lisp-program "/usr/bin/sbcl")
 #+END_SRC

 #+RESULTS:
 : /usr/bin/sbcl
* pdf tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install)
    )

  (use-package org-pdfview
    :ensure t)
#+END_SRC

#+RESULTS:

* Temporary
** Display time and battery
 #+BEGIN_SRC emacs-lisp
   (setq display-time-default-load-average t)
   (setq battery-mode-line-format "[%b%p%% %t]")
 #+END_SRC
** OS X Scrolling
 #+BEGIN_SRC emacs-lisp
   (setq mouse-wheel-scroll-amount '(0.07))
   (setq mouse-wheel-progressive-speed nil)
 #+END_SRC
** Smooth scrolling
 #+BEGIN_SRC emacs-lisp
   (use-package smooth-scrolling
     :ensure t)
 #+END_SRC
** Eshell/clear
 #+BEGIN_SRC emacs-lisp
 (defun eshell/clear ()
   "Clear the eshell buffer."
   (let ((inhibit-read-only t))
     (erase-buffer)
     (eshell-send-input)))
 #+END_SRC
** Reveal.js
https://github.com/yjwen/org-reveal
 #+BEGIN_SRC emacs-lisp
   (use-package ox-reveal
     :ensure ox-reveal)
   (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
   (setq org-reveal-mathjax t)
   (use-package htmlize
     :ensure t)
 #+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
  (yas-global-mode 1)
#+END_SRC

#+RESULTS:
: t

** Transparency
#+BEGIN_SRC emacs-lisp
  ;;(set-frame-parameter (selected-frame) 'alpha '(<active> . <inactive>))
  ;;(set-frame-parameter (selected-frame) 'alpha <both>)
  (set-frame-parameter (selected-frame) 'alpha '(85 . 50))
  (add-to-list 'default-frame-alist '(alpha . (85 . 50)))
#+END_SRC

#+RESULTS:
: ((alpha 85 . 50) (vertical-scroll-bars))

#+BEGIN_SRC emacs-lisp
  (defun toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (set-frame-parameter
       nil 'alpha
       (if (eql (cond ((numberp alpha) alpha)
                      ((numberp (cdr alpha)) (cdr alpha))
                      ;; Also handle undocumented (<active> <inactive>) form.
                      ((numberp (cadr alpha)) (cadr alpha)))
                100)
           '(85 . 50) '(100 . 100)))))
  (global-set-key (kbd "C-M-s-t") 'toggle-transparency)
#+END_SRC

#+RESULTS:
: toggle-transparency
* Multiple cursors
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c m c") 'mc/edit-lines)
  (global-set-key (kbd "C-M-}") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-M-{") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-M-|") 'mc/mark-all-like-this)
#+END_SRC

#+RESULTS:
: mc/mark-all-like-this
* Pretty Korean fonts
** Truetype Korean fonts
To use Truetype Korean fonts installed in the system, do:
#+BEGIN_SRC emacs-lisp
  (defun xftp (&optional frame)
    "Return t if FRAME support XFT font backend."
    (let ((xft-supported))
      (mapc (lambda (x) (if (eq x 'xft) (setq xft-supported t)))
            (frame-parameter frame 'font-backend))
      xft-supported))

  (when (xftp)
    (let ((fontset "fontset-default"))
      ;; (set-fontset-font fontset 'latin
      ;;                   '("DejaVu Sans Mono" . "unicode-bmp"))
      (set-fontset-font fontset 'hangul
                        '("NanumGothic" . "unicode-bmp"))
      ;; (set-face-attribute 'default nil
      ;;                     :font fontset
      ;;                     :height 110)
      ))
#+END_SRC
Reference: https://eatpeppershothot.blogspot.com/2014/05/configure-emacs-to-use-truetype-korean.html
** To type Korean in Linux:
- =M-x set-input-method= then type =korean-hangul=
- To switch between languages: =C-\=
* Email
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
#+END_SRC
* Org mobile
Reference: https://mobileorg.github.io/documentation/
#+BEGIN_SRC emacs-lisp
  ;; Set to the location of your Org files on your local system
  (setq org-directory "~/Dropbox/org")
  ;; Set to the name of the file where new notes will be stored
  (setq org-mobile-inbox-for-pull "~/Dropbox/org/flagged.org")
  ;; Set to <your Dropbox root directory>/MobileOrg.
  (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
#+END_SRC

#+RESULTS:
: ~/Dropbox/Apps/MobileOrg
