#+STARTUP: indent
* Adding Package Archives
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("melpa" . "http://melpa.org/packages/")
                         ("org" . "http://orgmode.org/elpa/")))
#+END_SRC

#+RESULTS:
: ((gnu . http://elpa.gnu.org/packages/) (melpa . http://melpa.org/packages/) (org . http://orgmode.org/elpa/))

* Custom file
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC

#+RESULTS:
: t

* =USE-PACKPAGE=

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(use-package delight :ensure t)
(use-package use-package-ensure-system-package :ensure t)
#+END_SRC

#+RESULTS:

* =DOOM-MODELINE=
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+END_SRC

* =NORD-THEME=
#+BEGIN_SRC emacs-lisp
(use-package nord-theme
  :ensure t)
(setq nord-comment-brightness 15)
(load-theme 'nord t)
#+END_SRC

#+RESULTS:
: t
** Nord-Theme org-block and org-checkbox
Original values are
#+BEGIN_EXAMPLE
(custom-theme-set-faces 'user
                        `(org-block ((,class (:foreground ,nord4))))
                        `(org-block-background ((,class (:background ,nord0))))
                        `(org-block-begin-line ((,class (:foreground ,nord7))))
                        `(org-block-end-line ((,class (:foreground ,nord7)))))
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
;;;; Color Constants
(let ((class '((class color) (min-colors 89)))
      (nord0 (if (display-graphic-p) "#2E3440" nil))
      (nord1 (if (display-graphic-p) "#3B4252" "black"))
      (nord2 (if (display-graphic-p) "#434C5E" "#434C5E"))
      (nord3 (if (display-graphic-p) "#4C566A" "brightblack"))
      (nord4 (if (display-graphic-p) "#D8DEE9" "#D8DEE9"))
      (nord5 (if (display-graphic-p) "#E5E9F0" "white"))
      (nord6 (if (display-graphic-p) "#ECEFF4" "brightwhite"))
      (nord7 (if (display-graphic-p) "#8FBCBB" "cyan"))
      (nord8 (if (display-graphic-p) "#88C0D0" "brightcyan"))
      (nord9 (if (display-graphic-p) "#81A1C1" "blue"))
      (nord10 (if (display-graphic-p) "#5E81AC" "brightblue"))
      (nord11 (if (display-graphic-p) "#BF616A" "red"))
      (nord12 (if (display-graphic-p) "#D08770" "brightyellow"))
      (nord13 (if (display-graphic-p) "#EBCB8B" "yellow"))
      (nord14 (if (display-graphic-p) "#A3BE8C" "green"))
      (nord15 (if (display-graphic-p) "#B48EAD" "magenta")))
  (custom-theme-set-faces 'user
                          `(org-block ((,class (:foreground ,nord4 :background ,nord1))))
                          `(org-block-begin-line ((,class (:foreground ,nord9 :background ,nord2))))
                          `(org-block-end-line ((,class (:foreground ,nord9 :background ,nord2))))
                          `(org-checkbox ((,class (:foreground ,nord9 :background ,nord2))))))
#+END_SRC

#+RESULTS:

* COMMENT =DOOM-THEMES=
#+BEGIN_SRC emacs-lisp
;;(require 'doom-themes)
(use-package doom-themes
  :ensure t)
;; Global settings (defaults)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled

;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
;; may have their own settings.
(load-theme 'doom-one t)

;; Enable flashing mode-line on errors
(doom-themes-visual-bell-config)

;; Enable custom neotree theme (all-the-icons must be installed!)
(doom-themes-neotree-config)
;; or for treemacs users
(doom-themes-treemacs-config)

;; Corrects (and improves) org-mode's native fontification.
(doom-themes-org-config)
#+END_SRC

#+RESULTS:
: doom-themes-org

* COMMENT Theme toggle
#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t) ;; stop asking if custom themes are safe
  (load-theme 'doom-one t)

  ;; Source of this theme toggle (adaptations by me):
  ;; https://emacs.stackexchange.com/questions/24088/make-a-function-to-toggle-themes
  (defvar doom-one-theme 'doom-one)
  (defvar doom-one-light-theme 'doom-one-light)
  (defvar tk-theme-current doom-one-theme)

  ;; disable other themes before loading new one
  (defadvice contrib/load-theme (before theme-dont-propagate activate)
    "Disable theme before loading new one."
    (mapcar #'disable-theme custom-enabled-themes))

  (defun contrib/next-theme (theme)
    (if (eq theme 'default)
	(disable-theme 'default)
      (progn
	(load-theme theme t)))
    (setq tk-theme-current theme))

  (defun contrib/toggle-theme ()
    (interactive)
    (cond ((eq tk-theme-current doom-one-theme) (contrib/next-theme doom-one-light-theme))
	  ((eq tk-theme-current doom-one-light-theme) (contrib/next-theme doom-one-theme))))
  (global-set-key (kbd "C-c M-t") 'contrib/toggle-theme)
#+END_SRC

#+RESULTS:
: contrib/toggle-theme

* =TREEMACS=
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if (executable-find "python3") 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after treemacs evil
  :ensure t)

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)
#+END_SRC

#+RESULTS:
* Sensible Defaults
To use Harry Schwartz's sensible defaults,
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/sensible-defaults.el")
#+END_SRC

#+BEGIN_EXAMPLE
(defun sensible-defaults/use-all-settings ()
  "Use all of the sensible-defaults settings."
  (sensible-defaults/open-files-from-home-directory)
  (sensible-defaults/increase-gc-threshold)
  (sensible-defaults/delete-trailing-whitespace)
  (sensible-defaults/treat-camelcase-as-separate-words)
  (sensible-defaults/automatically-follow-symlinks)
  (sensible-defaults/make-scripts-executable)
  (sensible-defaults/single-space-after-periods)
  (sensible-defaults/offer-to-create-parent-directories-on-save)
  (sensible-defaults/apply-changes-to-highlighted-region)
  (sensible-defaults/overwrite-selected-text)
  (sensible-defaults/ensure-that-files-end-with-newline)
  (sensible-defaults/confirm-closing-emacs)
  (sensible-defaults/quiet-startup)
  (sensible-defaults/make-dired-file-sizes-human-readable)
  (sensible-defaults/shorten-yes-or-no)
  (sensible-defaults/always-highlight-code)
  (sensible-defaults/refresh-buffers-when-files-change)
  (sensible-defaults/show-matching-parens)
  (sensible-defaults/flash-screen-instead-of-ringing-bell)
  (sensible-defaults/set-default-line-length-to 80)
  (sensible-defaults/open-clicked-files-in-same-frame-on-mac)
  (sensible-defaults/yank-to-point-on-mouse-click))
#+END_EXAMPLE

* Interface Tweaks
** Basics
 #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   (setq frame-title-format "TaEmaX")
   (scroll-bar-mode -1)
   (setq initial-buffer-choice t)
   (setq initial-scratch-message "")
 #+END_SRC

** From =prelude-ui.el=
#+BEGIN_SRC emacs-lisp
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))

(menu-bar-mode -1)

;; the blinking cursor is nothing, but an annoyance
(blink-cursor-mode -1)

;; disable the annoying bell ring
(setq ring-bell-function 'ignore)

;; disable startup screen
(setq inhibit-startup-screen t)

;; nice scrolling
(setq scroll-margin 0
      scroll-conservatively 100000
      scroll-preserve-screen-position 1)

;; mode line settings
(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)

;; enable y/n answers
(fset 'yes-or-no-p 'y-or-n-p)

;; more useful frame title, that show either a file or a
;; buffer name (if the buffer isn't visiting a file)
(setq frame-title-format
      '("" invocation-name " Prelude - " (:eval (if (buffer-file-name)
                                                    (abbreviate-file-name (buffer-file-name))
                                                  "%b"))))

;; show the cursor when moving after big movements in the window
(use-package beacon
  :ensure t)
(beacon-mode +1)

;; show available keybindings after you start typing
(use-package which-key
  :ensure t)
(which-key-mode +1)
#+END_SRC

* Managing Windows and Buffers
** Resizing Windows
 #+BEGIN_SRC emacs-lisp
   (bind-key "s-C-<left>"  'shrink-window-horizontally)
   (bind-key "s-C-<right>" 'enlarge-window-horizontally)
   (bind-key "s-C-<down>"  'shrink-window)
   (bind-key "s-C-<up>"    'enlarge-window)
 #+END_SRC
** Split and Switch
Whenever I split windows, I usually do so and also switch to the other
window as well, so might as well rebind the splitting key bindings to
do just that to reduce the repetition.
 #+BEGIN_SRC emacs-lisp
   (defun vsplit-other-window ()
     "Splits the window vertically and switches to that window."
     (interactive)
     (split-window-vertically)
     (other-window 1 nil))
   (defun hsplit-other-window ()
     "Splits the window horizontally and switches to that window."
     (interactive)
     (split-window-horizontally)
     (other-window 1 nil))
   (bind-key "C-x 2" 'vsplit-other-window)
   (bind-key "C-x 3" 'hsplit-other-window)
 #+END_SRC
** =SWITCH-WINDOW=
#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :ensure t)
(bind-key "C-z" 'switch-window)
#+END_SRC

** =BUFFER-MOVE=
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :ensure t)
  (global-set-key (kbd "H-S-k") 'buf-move-up)
  (global-set-key (kbd "H-S-j") 'buf-move-down)
  (global-set-key (kbd "H-S-h") 'buf-move-left)
  (global-set-key (kbd "H-S-l") 'buf-move-right)
#+END_SRC

#+RESULTS:
: buf-move-right
* Handling Backup Files
#+BEGIN_SRC emacs-lisp
;; store all backup and autosave files in the tmp dir
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

#+RESULTS:
* Configuration File Edit and Reload
** Editing
#+BEGIN_SRC emacs-lisp
  (defun visit-config()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
#+END_SRC

#+RESULTS:
: visit-config

** Reload
#+BEGIN_SRC emacs-lisp
  (defun reload-config()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC

#+RESULTS:
: reload-config
* Transparency
#+BEGIN_SRC emacs-lisp
  ;;(set-frame-parameter (selected-frame) 'alpha '(<active> . <inactive>))
  ;;(set-frame-parameter (selected-frame) 'alpha <both>)
  (set-frame-parameter (selected-frame) 'alpha '(90 . 80))
  (add-to-list 'default-frame-alist '(alpha . (90 . 80)))
#+END_SRC

#+RESULTS:
: ((alpha 90 . 80) (alpha 90 . 50) (vertical-scroll-bars))

#+BEGIN_SRC emacs-lisp
  (defun toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (set-frame-parameter
       nil 'alpha
       (if (eql (cond ((numberp alpha) alpha)
                      ((numberp (cdr alpha)) (cdr alpha))
                      ;; Also handle undocumented (<active> <inactive>) form.
                      ((numberp (cadr alpha)) (cadr alpha)))
                100)
           '(90 . 50) '(100 . 100)))))
  (global-set-key (kbd "C-M-S-t") 'toggle-transparency)
#+END_SRC

#+RESULTS:
: toggle-transparency

#+begin_src emacs-lisp
  (defun transparency (value)
    "Sets the transparency of the frame window. 0=transparent/100=opaque."
    (interactive "nTransparency Value 0 - 100 opaque:")
    (set-frame-parameter (selected-frame) 'alpha value))
#+end_src

#+RESULTS:
: transparency
* =HELM=
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t)
  (helm-mode 1)
  (helm-autoresize-mode 1)
  (setq helm-split-window-in-side-p
        t)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-m") 'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-h f") 'helm-apropos)
  (global-set-key (kbd "C-h r") 'helm-info-emacs)
  (global-set-key (kbd "C-h C-l") 'helm-locate-library)
#+END_SRC

#+RESULTS:
: helm-locate-library

* Exec-path
To have shell environments transferred to emacs. Install =exec-path-from-shell= with =M-x package-install-packages= (or use =use-package=) and then
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t)
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+END_SRC

#+RESULTS:
: ((MANPATH) (PATH . /usr/local/anaconda/bin:/home/tae/bin:/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/home/tae/.scripts/tools:/home/tae/.scripts/i3cmds:/home/tae/.scripts/tkconf:/home/tae/.scripts/:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/home/tae/.scripts/tools:/home/tae/.scripts/i3cmds:/home/tae/.scripts/tkconf:/home/tae/.scripts/))

* Org Mode
** Org bullets makes things look nice
*** Original org-bullets-bullet-list:
("◉" "○" "✸" "✿")
*** Candidate symbol lists:
Source: [[https://zhangda.wordpress.com/2016/02/15/configurations-for-beautifying-emacs-org-mode/][Da's web notes]]
 - hexagrams
   “✡” “⎈” “✽” “✲” “✱” “✻” “✼” “✽” “✾” “✿” “❀” “❁” “❂” “❃” “❄” “❅” “❆” “❇”

 - circles
   “○” “☉” “◎” “◉” “○” “◌” “◎” “●” “◦” “◯” “⚪” “⚫” “⚬” “❍” “￮” “⊙” “⊚” “⊛” “∙” “∘”

 - special circles
   “◐” “◑” “◒” “◓” “◴” “◵” “◶” “◷” “⚆” “⚇” “⚈” “⚉” “♁” “⊖” “⊗” “⊘”

 - crosses
   “✙” “♱” “♰” “☥” “✞” “✟” “✝” “†” “✠” “✚” “✜” “✛” “✢” “✣” “✤” “✥”

 - poker sybmols
   “♠” “♣” “♥” “♦” “♤” “♧” “♡” “♢”

 - yinyang
   “☯” “☰” “☱” “☲” “☳” “☴” “☵” “☶” “☷”

 - special symbols
   “☀” “♼” “☼” “☾” “☽” “☣” “§” “¶” “‡” “※” “✕” “△” “◇” “▶” “◀” “◈”

*** My Choice
 #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
     :ensure t
     :config
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   (setq org-bullets-bullet-list '("⊚" "⊙" "◉" "○" "●" "⚬" "◦"))
   ;; (setq org-bullets-bullet-list '("◉" "○" "✸" "✿"))

 #+END_SRC

 #+RESULTS:
 | ⊚ | ⊙ | ◉ | ○ | ● | ⚬ | ◦ |

** Org-ellipsis

*Some options*
 - right arrows
   “↝” “⇉” “⇝” “⇢” “⇨” “⇰” “➔” “➙” “➛” “➜” “➝” “➞”
   “➟” “➠” “➡” “➥” “➦” “➧” “➨”
   “➩” “➪” “➮” “➯” “➱” “➲”
   “➳” “➵” “➸” “➺” “➻” “➼” “➽”

 - arrow heads
   “➢” “➣” “➤” “≪”, “≫”, “«”, “»”

 - other arrows
   “↞” “↠” “↟” “↡” “↺” “↻”

 - lightening
   “⚡”

 - other symbols
   "…", "▼", "↴", "∞", "⬎", "⤷", "⤵"

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ↴")
#+END_SRC

#+RESULTS:
:  ↴
** More org-mode cosmetics
*** Better List Bullet
 - *Reference*: https://zzamboni.org/post/beautifying-org-mode-in-emacs/
 #+BEGIN_SRC emacs-lisp
;; Org-mode configuration
(font-lock-add-keywords
 'org-mode
 '(("^ +\\([-*]\\) "
    (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
 #+END_SRC

 #+RESULTS:

*** Org headlines
 #+BEGIN_SRC emacs-lisp
(let* ((variable-tuple (cond ((x-list-fonts "Inconsolata") '(:font "Inconsolata"))
                             ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                             ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                             ((x-list-fonts "Verdana")         '(:font "Verdana"))
                             ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                             (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight bold :foreground ,base-font-color)))
  (custom-theme-set-faces 'user
                          `(org-level-8 ((t (,@headline ,@variable-tuple))))
                          `(org-level-7 ((t (,@headline ,@variable-tuple))))
                          `(org-level-6 ((t (,@headline ,@variable-tuple))))
                          `(org-level-5 ((t (,@headline ,@variable-tuple))))
                          `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.05))))
                          `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.15))))
                          `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.25))))
                          `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.5))))
                          `(org-document-title ((t (,@headline ,@variable-tuple :height 1.5 :underline nil))))))
 #+END_SRC
*** Org TODO Keywords
 #+BEGIN_SRC emacs-lisp
;; Fancy todo list
;; (setq org-todo-keywords
;;       '((sequence "☛ TODO(t)" "|" "✔ DONE(d)")
;;         (sequence "☞ WAITING(w)" "|")
;;         (sequence "|" "✘ CANCELED(c)")))

;; below comes from https://github.com/rickardsundin/dotfiles/blob/master/emacs.org and https://github.com/howardabrams/dot-files/blob/master/emacs-org.org
(setq org-todo-keywords
      '((sequence "TODO(t)" "DOING(i)" "WAITING(w)" "|" "DONE(d)" "|" "CANCELED(c)")))

;; (font-lock-add-keywords            ; A bit silly but my headers are now
;;  'org-mode `(("^\\*+ \\(TODO\\) "  ; shorter, and that is nice canceled
;;               (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚑")
;;                         nil)))
;;              ("^\\*+ \\(DOING\\) "
;;               (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚐")
;;                         nil)))
;;              ("^\\*+ \\(WAITING\\) "
;;               (1 (progn (compose-region (match-beginning 1) (match-end 1) "⌛")
;;                         nil)))
;;              ("^\\*+ \\(CANCELED\\) "
;;               (1 (progn (compose-region (match-beginning 1) (match-end 1) "✘")
;;                         nil)))
;;              ("^\\*+ \\(DONE\\) "
;;               (1 (progn (compose-region (match-beginning 1) (match-end 1) "✔")
;;                         nil)))))
 #+END_SRC

 #+RESULTS:
 | sequence | TODO(t) | DOING(i) | WAITING(w) |   |   | DONE(d) |   |   | CANCELED(c) |

** Hide markups
#+BEGIN_SRC emacs-lisp
;; Remove the markup characters, i.e., "/text/" becomes (italized) "text"
(setq org-hide-emphasis-markers nil)
;; (setq org-hide-emphasis-markers t)
#+END_SRC

#+RESULTS:

*Bold* /italic/ _underline_ +strike-through+ ~code~ =verbatim=

** More org stuff
 #+BEGIN_SRC emacs-lisp
   (setq org-confirm-babel-evaluate nil)
   (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
   (add-hook 'org-mode-hook 'org-display-inline-images)
 #+END_SRC

** Babel editing in the current window
Possible set-ups:
 - =current-window=
 - =other-window=
 - =reorganize-frame=
 - =other-frame=
#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'reorganize-frame)
#+END_SRC

#+RESULTS:
: reorganize-frame

** Org Babel
*** COMMENT =org-structure- template-alist=: changed in org 9.2
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
  (add-to-list 'org-structure-template-alist
               '("sh" "#+BEGIN_SRC sh\n?\n#+END_SRC"))
#+END_SRC

#+RESULTS:
| sh | #+BEGIN_SRC sh |

*** Babel languages
 #+BEGIN_SRC emacs-lisp
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      ;; (ruby . t)
      (lisp . t)
      (matlab . t)
      (fortran . t)
      (python . t)
      ;; (ipython . t)
      (shell . t)
      (C . t)
      (makefile . t)
      ;; (mathematica . t)
      ;; (maple . t)
      (dot . t)
      (octave . t)
      ))
 #+END_SRC

 #+RESULTS:
*** Org source language
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-src-lang-modes '("fortran" . f90))
#+END_SRC

#+RESULTS:
: ((fortran . f90) (ocaml . tuareg) (elisp . emacs-lisp) (ditaa . artist) (asymptote . asy) (dot . fundamental) (sqlite . sql) (calc . fundamental) (C . c) (cpp . c++) (C++ . c++) (screen . shell-script) (shell . sh) (bash . sh))

** =org-src-preserve-indentation=
#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

* TeX Editing Environment
** Basic: Required Packages and Files
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :ensure t)

(use-package cdlatex
  :ensure t)

(use-package smartparens
  :ensure t)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
(require 'smartparens-latex)
(require 'cl)
#+END_SRC

#+RESULTS:
: cl

** Basic Configuration
#+BEGIN_SRC emacs-lisp
;; AUCTeX configuration
(setq TeX-auto-save t)
(setq TeX-parse-self t)
;; (setq TeX-close-quote "")
;; (setq TeX-open-quote "")
(setq TeX-close-quote "''")
(setq TeX-open-quote "``")

;; For multi-file document structures (e.g. \include or \input)
(setq-default TeX-master nil)

;; use pdflatex
(setq TeX-PDF-mode t)
#+END_SRC

** Default LaTeX-mode-hook (from prelude)
#+BEGIN_SRC emacs-lisp
(defcustom prelude-latex-fast-math-entry 'LaTeX-math-mode
  "Method used for fast math symbol entry in LaTeX."
  :link '(function-link :tag "AUCTeX Math Mode" LaTeX-math-mode)
  :link '(emacs-commentary-link :tag "CDLaTeX" "cdlatex.el")
  :group 'prelude
  :type '(choice (const :tag "None" nil)
                 (const :tag "AUCTeX Math Mode" LaTeX-math-mode)
                 (const :tag "CDLaTeX" cdlatex)))

(defun prelude-latex-mode-defaults ()
  "Default Prelude hook for `LaTeX-mode'."
  (turn-on-reftex)
  (abbrev-mode +1)
  (smartparens-mode +1)
  (visual-line-mode +1)
  (flyspell-mode +1)
  (case prelude-latex-fast-math-entry
    (LaTeX-math-mode (LaTeX-math-mode 1))
    (cdlatex (turn-on-cdlatex))))

(setq reftex-plug-into-AUCTeX t)

(setq prelude-latex-mode-hook 'prelude-latex-mode-defaults)

(add-hook 'LaTeX-mode-hook (lambda ()
			     (run-hooks 'prelude-latex-mode-hook)))
#+END_SRC

** More hooks
 #+BEGIN_SRC emacs-lisp
;; More hooks
(setq TeX-source-correlate-mode t)
(setq TeX-source-correlate-start-server t)
(setq TeX-source-correlate-method 'synctex)
(remove-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
(add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
(add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
 #+END_SRC

 #+RESULTS:
 | TeX-source-correlate-mode | TeX-PDF-mode | (lambda nil (setq TeX-command-list (cons (quote (latexmk latexmk -pdf %s TeX-run-TeX nil t :help Run latexmk on file)) TeX-command-list))) | (lambda nil (run-hooks (quote prelude-latex-mode-hook))) |

** latexmk
#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook (lambda ()
			     (push
			      '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
				:help "Run latexmk on file")
			      TeX-command-list)))
(add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk")))
#+END_SRC

#+RESULTS:
| lambda | nil | (setq TeX-command-default latexmk) |

** AucTeX and Zathura
#+BEGIN_SRC emacs-lisp
;;(TeX-source-correlate-mode)        ; activate forward/reverse search
;;(TeX-PDF-mode)
;(add-to-list 'TeX-view-program-list '("zathura" zathura-forward-search))
(setq TeX-view-program-list '("zathura" zathura-forward-search))
(setq TeX-view-program-selection (quote ((output-pdf "zathura") (output-dvi "xdvi"))))

(setq zathura-procs ())
(defun zathura-forward-search ()
  ;; Open the compiled pdf in Zathura with synctex. This is complicated since
  ;; 1) Zathura refuses to acknowledge Synctex directive if the pdf is not
  ;; already opened
  ;; 2) This means we have to bookkeep open Zathura processes ourselves: first
  ;; open a new pdf from the beginning, if it is not already open. Then call
  ;; Zathura again with the synctex directive.
  (interactive)
  (let* ((zathura-launch-buf (get-buffer-create "*Zathura Output*"))
         (pdfname (TeX-master-file "pdf"))
         (zatentry (assoc pdfname zathura-procs))
         (zatproc (if (and zatentry (process-live-p (cdr zatentry)))
                      (cdr zatentry)
                    (progn
                      (let ((proc (progn (message "Launching Zathura")
                                         (start-process "zathura-launch"
                                                        zathura-launch-buf "zathura"
                                                        "-x" "emacsclient +%{line} %{input}" pdfname))))
                        (when zatentry
                          (setq zathura-procs (delq zatentry zathura-procs)))
                        (add-to-list 'zathura-procs (cons pdfname proc))
                        (set-process-query-on-exit-flag proc nil)
                        proc))))
         (pid (process-id zatproc))
         (synctex (format "%s:0:%s"
                          (TeX-current-line)
                          (TeX-current-file-name-master-relative)))
         )
    (start-process "zathura-synctex" zathura-launch-buf "zathura" "--synctex-forward" synctex pdfname)
    (start-process "raise-zathura-wmctrl" zathura-launch-buf "wmctrl" "-a" pdfname)
    ))
#+END_SRC

#+RESULTS:
: zathura-forward-search

* Emacsclient
 #+BEGIN_SRC emacs-lisp
   (use-package server
    :config
    (server-start))
 #+END_SRC

 #+RESULTS:
 : t
