#+TITLE: TK Emacs Configuration
#+STARTUP: overview indent

* First things first
** (ORG) Easy-to-add emacs-lisp template
Since I will be building the configuration file here in the style of literate programming, I will neeed
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

#+RESULTS:
| el | #+BEGIN_SRC emacs-lisp |

** (ORG) More conveniencies
 #+BEGIN_SRC emacs-lisp
   (setq org-confirm-babel-evaluate nil)
   (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
   (add-hook 'org-mode-hook 'org-display-inline-images)
 #+END_SRC

 #+RESULTS:
 | org-display-inline-images | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

* EXWM
** Install =EXWM=
#+BEGIN_SRC emacs-lisp
  (use-package exwm
    :ensure t
    :config
    (require 'exwm-config)
    (exwm-config-default))
#+END_SRC

#+RESULTS:
: t

** System tray
#+BEGIN_SRC emacs-lisp
  (require 'exwm-systemtray)
  (exwm-systemtray-enable)
#+END_SRC

#+RESULTS:
| exwm-systemtray--exit |

** =dmenu= for emacs
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("s-SPC" . 'dmenu))
#+END_SRC

#+RESULTS:
: dmenu

* Theme
** Spacemacs
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-theme
    :ensure t
    :init
      (load-theme 'spacemacs-dark t))
#+END_SRC

#+RESULTS:
: t

* Some sane defaults
** Remove startup screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

#+RESULTS:
: t

** Highlight
#+BEGIN_SRC emacs-lisp
(when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC

#+RESULTS:
| hl-line-mode |
** Change yes-or-no to y-or-n
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Helm
** Install
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffers-list)
    ("C-x b" . 'helm-mini)
    ("M-x" . 'helm-M-x)
    ("M-y" . 'helm-show-kill-ring)
    :init
    (helm-mode 1))
#+END_SRC

#+RESULTS:
: helm-show-kill-ring

** Set-up
#+BEGIN_SRC emacs-lisp
(helm-autoresize-mode 1)
(setq helm-split-window-in-side-p t)
#+END_SRC

#+RESULTS:
: t

* Switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :bind
    ("C-z" . switch-window))
#+END_SRC

#+RESULTS:
: switch-window
